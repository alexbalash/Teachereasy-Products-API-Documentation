openapi: 3.0.3
info:
  title: Teachereasy Products APIs 
  description: |
    # About us
     This `OpenAPI` specification outlines the APIs provided by ***Teachereasy*** for accessing teacher and course information, as well as managing orders.
    ## What's next
     - authentication
     - reusable components
  termsOfService: https://teachereasy.com/terms/
  contact:
    name: API Support
    url: https://www.teachereasy.com/support
    email: support@teachereasy.com
  license:
    name: Teachereasy License
    url: https://www.teachereasy.com/licenses/LICENSE-2.0.html
  version: 0.0.1
servers:
  - url: https://development.teachereasy-server.com/v1
    description: Development server
tags:
  - name: Teachers
    description: Operations with teachers
  - name: Courses
    description: Operations with courses
  - name: Orders
    description: Operations with orders
paths:
  /teachers:
    get:
      tags: 
        - Teachers
      summary: List teachers
      description: Retrieves a list of teachers available on Teachereasy.
      parameters:
        - name: teacherId
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            example: 100
      responses:
        '200':
          description: A list of teachers
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    teacherId:
                      type: integer
                    name:
                      type: string
              examples:
                all-teachers-data:
                  summary: Teachers example data
                  value:
                    - teacherId: 101
                      name: Julia Ashew
                    - teacherId: 202
                      name: Frank Lop
                    - teacherId: 56
                      name: Miranda Regrow
                single-teacher-data:
                  summary: A single teacher example data
                  value:
                    - teacherId: 101
                      name: Julia Ashew
        '500':
          $ref: "#/components/responses/InternalServerError"
  /teachers/{teacherID}:
    get:
      tags: 
        - Teachers
      summary: Get teacher
      description: Retrieves information about a specific teacher by their ID.
      parameters:
        - name: teacherID
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 1000
          example: 101
      responses:
        '200':
          description: Teacher information
          content:
            application/json:
              schema:
                type: object
                properties:
                  teacherId:
                      type: integer
                  name:
                      type: string
        '500':
          $ref: "#/components/responses/InternalServerError"
  /courses:
    get:
      tags: 
        - Courses
      summary: List courses
      description: Retrieves a list of available courses. 
      parameters:
        - name: courseID
          in: query 
          schema:
            type: integer
          example: 23
      responses:
        '200':
          description: A list of courses
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    courseId:
                      type: integer
                    courseName:
                      type: string
                    teacherID:
                       type: integer
                    name: 
                      type: string
              examples:
                courses-data:
                  summary: Courses example data
                  value:
                    - courseId: 10
                      courseName: Web Design
                      teacherID: 202
                      name: Frank Lop
                    - courseId: 49
                      courseName: Integrals
                      teacherID: 101
                      name: Julia Ashew
                    - courseId: 40
                      courseName: Collocations
                      teacherID: 56
                      name: Miranda Regrow
        '500':
          $ref: "#/components/responses/InternalServerError"
  /courses/{courseID}:
    get:
      tags: 
        - Courses
      summary: Get course
      description: Retrieves information about a specific course by its ID.
      parameters:
        - name: courseID
          in: path
          required: true
          schema:
            type: integer
          example: 10
      responses:
        '200':
          description: Course information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/course"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /orders:
    post:
      tags: 
        - Orders
      summary: Create order
      description: |
        Submits order details for processing
        and shipping.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                products:
                  type: array
                  items:
                    $ref: "#/components/schemas/product"
                personalData:
                  $ref: "#/components/schemas/personalData"
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  orderId:
                    type: integer
        '500':
          $ref: "#/components/responses/InternalServerError"
    put:
      tags: 
        - Orders
      summary: Update order
      description: |
        Updates order details for processing
        and shipping.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                orderID:
                  type: integer
                products:
                  type: array
                  items:
                    $ref: "#/components/schemas/product"
                personalData:
                  $ref: "#/components/schemas/personalData"
      responses:
        '200':
          description: Order updated successfully
        '500':
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags: 
        - Orders
      summary: Delete order
      description: Delete order details. 
      parameters:
        - $ref: "#/components/parameters/orderIdQueryParam"
      responses:
        '204':
          description: Order details cancelled successfully
        '500':
          $ref: "#/components/responses/InternalServerError"
    get:
      tags: 
        - Orders
      summary: Get order
      description: Retrieves order details.
      parameters:
        - $ref: "#/components/parameters/orderIdQueryParam"
      responses:
        '200':
          description:  Order details fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  orderID:
                    type: integer
                  products:
                    type: array
                    items:
                      $ref: "#/components/schemas/product"
                  personalData:
                    $ref: "#/components/schemas/personalData"
        '500':
          $ref: "#/components/responses/InternalServerError"
components:
  parameters:
    orderIdQueryParam:
      name: orderId
      in: query
      required: true
      schema:
          type: integer
  schemas:
    personalData:
      type: object
      properties:
        address:
          type: string
          description: Contains information about a <u>physical location</u>, such as the country, city, street name, and street number.
        phoneNumber:
          type: string
    product:
      type: object
      properties:
        courseId:
          type: integer
        courseName:
          type: string
        price:
          type: number
        name:
          type: string
    course: 
      type: object
      properties:
        courseId:
          type: integer
        courseName:
          type: string
  responses:
    InternalServerError:
      description: |
        An error occured while processing the request.